#include "StdAfx.h"
#include "MAT.h"


MAT::MAT(void)
{
	filas=0;
	columnas=0;
	Matriz[M][M]=0;
}
int MAT::GetFilas(){
return filas;}
void MAT::SetFilas(int F){
filas=F;}
int MAT::GetColumnas(){
return columnas;}
void MAT::SetColumnas(int C){
columnas=C;}
int MAT::GetMatriz(int CF, int CC){
return Matriz[CF][CC];}
void MAT::SetMatriz(int CF, int CC, int a){
Matriz[CF][CC]=a;
}

void MAT::EliminarRep(){
int F=0,C=0;
int P;
do
{
	do{
	int k=0;
	int aux=Matriz[F][C];
	for(int i=0;i<GetFilas();i++)
	{
		for(int j=0;j<GetColumnas();j++)
		{
			P=Matriz[i][j];
			if(P==aux)
			{k++;
			if(k>1)
			{SetMatriz(i,j,0);}
			}
		}
	}
	C++;}while(C<GetColumnas());
	F++;
	C=0;
	}while (F<GetFilas()&&C<GetColumnas());

}
int MAT::ContMatSup(){
	int fil=0, col=0;
	int cont=0;
	int aux2;
	int cont2;
	do{
		int aux=Matriz[fil][col];
		int k=0;
		for(int i=fil+1;i<GetFilas()-1;i++)
			{
				aux2=Matriz[i][col];
				if(aux2=0)
				{k=0;}
			}
		if(k==0)
			{
				col++;
				fil=col;
			}
		cont2=k;
	}while(fil<GetFilas());
	if (cont2==0)
	{for(int i=GetColumnas()-1;i>0;i--)
	{cont=cont+i;}
	return cont;
}
}

#pragma once
#define M 50
class MAT
{
private:
	int Matriz[M][M];
	int filas;
	int columnas;

public:
	MAT(void);
	int GetFilas();
	void SetFilas(int F);
	int GetColumnas();
	void SetColumnas(int C);
	int GetMatriz(int CF, int CC);
	void SetMatriz(int CF, int CC, int a);
	void EliminarRep();
	int ContMatSup();
};

#pragma once
#include "MAT.h"

namespace Matriz {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for Form1
	/// </summary>
	MAT M1;
	int posF=0;
	int posC=0;
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Label^  label1;
	protected: 
	private: System::Windows::Forms::TextBox^  txtFilas;
	private: System::Windows::Forms::TextBox^  txtColumnas;

	private: System::Windows::Forms::Label^  label2;
	private: System::Windows::Forms::Button^  txtDefinir;
	private: System::Windows::Forms::DataGridView^  Grid;
	private: System::Windows::Forms::TextBox^  txtDato;
	private: System::Windows::Forms::Label^  label3;
	private: System::Windows::Forms::Button^  btnIng;
	private: System::Windows::Forms::Button^  button1;
	private: System::Windows::Forms::Button^  button2;
	private: System::Windows::Forms::TextBox^  txtMatSup;



	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->txtFilas = (gcnew System::Windows::Forms::TextBox());
			this->txtColumnas = (gcnew System::Windows::Forms::TextBox());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->txtDefinir = (gcnew System::Windows::Forms::Button());
			this->Grid = (gcnew System::Windows::Forms::DataGridView());
			this->txtDato = (gcnew System::Windows::Forms::TextBox());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->btnIng = (gcnew System::Windows::Forms::Button());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->button2 = (gcnew System::Windows::Forms::Button());
			this->txtMatSup = (gcnew System::Windows::Forms::TextBox());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->Grid))->BeginInit();
			this->SuspendLayout();
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(22, 30);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(28, 13);
			this->label1->TabIndex = 0;
			this->label1->Text = L"Filas";
			// 
			// txtFilas
			// 
			this->txtFilas->Location = System::Drawing::Point(74, 27);
			this->txtFilas->Name = L"txtFilas";
			this->txtFilas->Size = System::Drawing::Size(100, 20);
			this->txtFilas->TabIndex = 1;
			// 
			// txtColumnas
			// 
			this->txtColumnas->Location = System::Drawing::Point(74, 53);
			this->txtColumnas->Name = L"txtColumnas";
			this->txtColumnas->Size = System::Drawing::Size(100, 20);
			this->txtColumnas->TabIndex = 3;
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(22, 56);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(53, 13);
			this->label2->TabIndex = 2;
			this->label2->Text = L"Columnas";
			// 
			// txtDefinir
			// 
			this->txtDefinir->Location = System::Drawing::Point(180, 30);
			this->txtDefinir->Name = L"txtDefinir";
			this->txtDefinir->Size = System::Drawing::Size(75, 39);
			this->txtDefinir->TabIndex = 4;
			this->txtDefinir->Text = L"Definir ";
			this->txtDefinir->UseVisualStyleBackColor = true;
			this->txtDefinir->Click += gcnew System::EventHandler(this, &Form1::txtDefinir_Click);
			// 
			// Grid
			// 
			this->Grid->BackgroundColor = System::Drawing::SystemColors::MenuBar;
			this->Grid->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->Grid->GridColor = System::Drawing::SystemColors::MenuBar;
			this->Grid->Location = System::Drawing::Point(25, 126);
			this->Grid->Name = L"Grid";
			this->Grid->Size = System::Drawing::Size(220, 146);
			this->Grid->TabIndex = 5;
			// 
			// txtDato
			// 
			this->txtDato->Location = System::Drawing::Point(74, 94);
			this->txtDato->Name = L"txtDato";
			this->txtDato->Size = System::Drawing::Size(100, 20);
			this->txtDato->TabIndex = 7;
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->Location = System::Drawing::Point(22, 97);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(30, 13);
			this->label3->TabIndex = 6;
			this->label3->Text = L"Dato";
			// 
			// btnIng
			// 
			this->btnIng->Location = System::Drawing::Point(180, 92);
			this->btnIng->Name = L"btnIng";
			this->btnIng->Size = System::Drawing::Size(75, 23);
			this->btnIng->TabIndex = 8;
			this->btnIng->Text = L"Ingresar";
			this->btnIng->UseVisualStyleBackColor = true;
			this->btnIng->Click += gcnew System::EventHandler(this, &Form1::btnIng_Click);
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(278, 38);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(75, 23);
			this->button1->TabIndex = 9;
			this->button1->Text = L"Eliminar Rep";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &Form1::button1_Click);
			// 
			// button2
			// 
			this->button2->Location = System::Drawing::Point(311, 121);
			this->button2->Name = L"button2";
			this->button2->Size = System::Drawing::Size(75, 79);
			this->button2->TabIndex = 10;
			this->button2->Text = L"Cantidad de elementos matriz superior";
			this->button2->UseVisualStyleBackColor = true;
			this->button2->Click += gcnew System::EventHandler(this, &Form1::button2_Click);
			// 
			// txtMatSup
			// 
			this->txtMatSup->Location = System::Drawing::Point(299, 206);
			this->txtMatSup->Name = L"txtMatSup";
			this->txtMatSup->Size = System::Drawing::Size(100, 20);
			this->txtMatSup->TabIndex = 11;
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(416, 429);
			this->Controls->Add(this->txtMatSup);
			this->Controls->Add(this->button2);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->btnIng);
			this->Controls->Add(this->txtDato);
			this->Controls->Add(this->label3);
			this->Controls->Add(this->Grid);
			this->Controls->Add(this->txtDefinir);
			this->Controls->Add(this->txtColumnas);
			this->Controls->Add(this->label2);
			this->Controls->Add(this->txtFilas);
			this->Controls->Add(this->label1);
			this->ForeColor = System::Drawing::SystemColors::InactiveCaptionText;
			this->Name = L"Form1";
			this->Text = L"Form1";
			this->TransparencyKey = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(255)), static_cast<System::Int32>(static_cast<System::Byte>(192)), 
				static_cast<System::Int32>(static_cast<System::Byte>(192)));
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->Grid))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion

	private: System::Void txtDefinir_Click(System::Object^  sender, System::EventArgs^  e) {
				 int F=Convert::ToInt32(txtFilas->Text);
				 int C=Convert::ToInt32(txtColumnas->Text);
				 M1.SetFilas(F);
				 M1.SetColumnas(C);
				 Grid->RowCount=M1.GetFilas();
				 Grid->ColumnCount=M1.GetColumnas();
			 }
private: System::Void btnIng_Click(System::Object^  sender, System::EventArgs^  e) {
			 int a=Convert::ToInt32(txtDato->Text);
			 M1.SetMatriz(posF,posC,a);
			 Grid->Rows[posF]->Cells[posC]->Value=M1.GetMatriz(posF,posC);
			if(posC==M1.GetColumnas()-1)
			{
				posC=0;
				posF++;
			}
			else
				posC++;			 
			}
private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {
			 M1.EliminarRep();
			 posC=0;
			 posF=0;
			 while(posF<M1.GetFilas())
			 {
			 Grid->Rows[posF]->Cells[posC]->Value=M1.GetMatriz(posF,posC);
			if(posC==M1.GetColumnas()-1)
			{
				posC=0;
				posF++;
			}
			else
				posC++;			 
			}
		 }
private: System::Void button2_Click(System::Object^  sender, System::EventArgs^  e) {
			 int c=M1.ContMatSup();
			 if(c==0)
			 {MessageBox::Show("La matriz no es triangular superior");}
			 else
			 {txtMatSup->Text=Convert::ToString(c);}
			 }
};
}

